/*
 * This file is part of kython.
 *
 * kython is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * kython is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with kython.  If not, see <https://www.gnu.org/licenses/>.
 */

package green.sailor.kython.generation

import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.metadata.KotlinPoetMetadataPreview
import green.sailor.kython.annotation.*
import green.sailor.kython.generation.extensions.messager
import green.sailor.kython.generation.generators.generateDictSetter
import green.sailor.kython.generation.generators.generateMethodWrappers
import green.sailor.kython.generation.generators.generateSlotWrappers
import javax.annotation.processing.AbstractProcessor
import javax.annotation.processing.RoundEnvironment
import javax.annotation.processing.SupportedOptions
import javax.lang.model.SourceVersion
import javax.lang.model.element.TypeElement

/**
 * Codegen anno processor.
 */
@KotlinPoetMetadataPreview
@SupportedOptions(
    KythonProcessor.KAPT_KOTLIN_GENERATED_OPTION_NAME,
    "org.gradle.annotation.processing.aggregating"
)
class KythonProcessor : AbstractProcessor() {
    companion object {
        const val KAPT_KOTLIN_GENERATED_OPTION_NAME = "kapt.kotlin.generated"
        val pyObject = ClassName(
            "green.sailor.kython.interpreter.pyobject",
            "PyObject"
        )
    }

    override fun getSupportedAnnotationTypes(): MutableSet<String> {
        return mutableSetOf(
            GenerateMethods::class.java.name,
            Slotted::class.java.name,
            ExposeMethod::class.java.name,
            ExposeField::class.java.name
        )
    }

    override fun getSupportedSourceVersion(): SourceVersion {
        return SourceVersion.latest()
    }

    override fun process(
        annotations: MutableSet<out TypeElement>?,
        roundEnv: RoundEnvironment?
    ): Boolean {
        messager = this.processingEnv.messager
        // ??
        if (roundEnv == null || roundEnv.processingOver()) return false
        val builder = FileSpec.builder(
            packageName = "green.sailor.kython.generation.generated",
            fileName = "GeneratedCode"
        )

        builder.addAnnotation(AnnotationSpec.builder(JvmName::class.java).apply {
            addMember("%S", "GeneratedCode")
        }.build())

        val methodTargets = roundEnv.getElementsAnnotatedWith(GenerateMethods::class.java)
        val info = methodTargets
            .filterIsInstance<TypeElement>()
            .flatMap { generateMethodWrappers(it) }

        info.forEach { builder.addType(it.builtClass) }

        val slotTargets = roundEnv.getElementsAnnotatedWith(Slotted::class.java)
        val slotGen = slotTargets
            .filterIsInstance<TypeElement>()
            .map { generateSlotWrappers(it) }

        for (info in slotGen) {
            info.methodWrappers.forEach { builder.addType(it.builtClass) }
            builder.addFunction(info.getAttr)
            builder.addFunction(info.setAttr)
        }

        val statements = info.map { generateDictSetter(it) }
        val adderMethodsFunction = FunSpec.builder("addAllMethods").apply {
            addKdoc("Adds builtin wrapper methods to objects dicts")
            statements.forEach { addCode(it) }
        }.build()
        builder.addFunction(adderMethodsFunction)

        builder.addComment("This file is automatically generated! Do not edit.")
        builder.addAnnotation(AnnotationSpec.builder(Suppress::class).apply {
            addMember("%S", "NOTHING_TO_INLINE")
        }.build())

        builder.build().writeTo(processingEnv.filer)

        return true
    }
}
